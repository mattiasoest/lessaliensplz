{"version":3,"sources":["../../../../assets/Script/assets/Script/Enemy.ts"],"names":[],"mappings":";;;;;AAEM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAG1C;IAAmC,yBAAY;IAD/C;QAAA,qEAwHC;QArHoB,UAAI,GAAG,IAAI,CAAC;QAEnB,gBAAU,GAAW,CAAC,CAAC;QACvB,eAAS,GAAW,CAAC,CAAC;QACtB,gBAAU,GAAW,CAAC,CAAC;QACvB,qBAAe,GAAY,IAAI,CAAC;QAE1C,+BAA+B;QACrB,eAAS,GAAW,CAAC,CAAC;QACxB,SAAG,GAAY,IAAI,CAAC;QACpB,oBAAc,GAAY,KAAK,CAAC;QAChC,YAAM,GAAG,CAAC,CAAC;QAGnB,cAAQ,GAAc,IAAI,CAAC;QAE3B,UAAI,GAAS,IAAI,CAAC;;IAqGtB,CAAC;IAnGG,sBAAM,GAAN;QACI,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9F,CAAC;IAED,cAAc;IAEd,sBAAM,GAAN,UAAQ,EAAE;QACN,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvB,uDAAuD;YACvD,gBAAgB;YAChB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;gBACtC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAChC;YACD,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;gBAChC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;aACvB;SACJ;IACL,CAAC;IAED,0BAAU,GAAV,UAAW,aAAsB,EAAE,MAAc,EAAE,EAAW;QAE1D,sBAAsB;QACtB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE;YACtC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;SAC/B;aACI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,EAAE;YAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC9B;QACD,iBAAiB;QACjB,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,MAAM,IAAI,aAAa,GAAG,EAAE,CAAC;SACrC;aAAM;YACH,IAAI,CAAC,MAAM,IAAI,aAAa,GAAG,EAAE,CAAC;SACrC;QAED,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;IAE7B,CAAC;IAED,8BAAc,GAAd,UAAe,OAAO,EAAE,YAAY,EAAE,aAAa;QAC/C,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC9B,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;gBACpB,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;iBACI;gBACD,sGAAsG;gBACtG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBACpE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACrD;SACJ;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACtC,kBAAkB;YAClB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,sBAAsB,GAAG,KAAK,CAAC;YACpE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAClD,SAAS;YACT,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACnC,+BAA+B;YAC3B,gCAAgC;SACnC;IACT,CAAC;IAED,iCAAiB,GAAjB,UAAkB,QAAgB,EAAC,aAAuB;QACtD,EAAE,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC9E,CAAC;IAED,kDAAkD;IAClD,2BAAW,GAAX,UAAY,IAAa,EAAE,cAAuB;QAC9C,IAAM,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,8CAA8C;QAC9C,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClD,IAAM,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAA;QAChB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7B,IAAM,WAAW,GAAG,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACtD,4BAA4B;QAC5B,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACjC,CAAC;IAED,wDAAwD;IACxD,qDAAqD;IACrD,iBAAiB;IACjB,wBAAQ,GAAR;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;QAC5G,OAAO,KAAK,GAAG,EAAE,CAAC;IACtB,CAAC;IACD,4DAA4D;IAC5D,2BAAW,GAAX;QACI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAtGD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;2CACO;IAhBV,KAAK;QADzB,OAAO;OACa,KAAK,CAuHzB;IAAD,YAAC;CAvHD,AAuHC,CAvHkC,EAAE,CAAC,SAAS,GAuH9C;kBAvHoB,KAAK","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["import Game from \"./Game\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Enemy extends cc.Component {\n\n    private readonly DAMP = 0.95;\n\n    protected lowerBound: number = 0;\n    protected leftBound: number = 0;\n    protected rightBound: number = 0;\n    protected isAllowedToFire: boolean = true;\n\n    // Being set in the subclasses.\n    protected hitPoints: number = 0;\n    private cvs: cc.Node = null;\n    private applyForceLeft: boolean = false;\n    private xSpeed = 0;\n\n    @property(cc.Prefab)\n    redLaser: cc.Prefab = null;\n\n    game: Game = null;\n\n    onLoad () {\n        this.cvs = cc.find(\"Canvas\");\n        this.lowerBound = -this.cvs.height * 0.65;\n        this.leftBound = -this.cvs.width / 2;\n        this.rightBound = this.cvs.width / 2;\n        this.applyForceLeft = this.getComponent(cc.RigidBody).linearVelocity.x < 0 ? false : true;\n    }\n\n    // start () {}\n\n    update (dt) {\n        if (cc.isValid(this.node)) {\n            // Stop the laser shooting after passing the lower part\n            // Of the canvas\n            if (this.node.y <= this.lowerBound * 0.6) {\n                this.isAllowedToFire = false;\n            }\n            if (this.node.y <= this.lowerBound) {\n                this.node.destroy();\n            }\n        }\n    }\n\n    updateShip(xAcceleration : number, ySpeed: number, dt : number) {\n\n        // X-axis force bounds\n        if (this.node.x <= this.leftBound * 0.65) {\n            this.applyForceLeft = false;\n        }\n        else if (this.node.x >= this.rightBound * 0.65) {\n            this.applyForceLeft = true;\n        }\n        // === X-AXIS ===\n        if (this.applyForceLeft) {\n            this.xSpeed -= xAcceleration * dt;\n        } else {\n            this.xSpeed += xAcceleration * dt;\n        }\n\n        this.node.y += ySpeed * dt;\n        this.node.x += this.xSpeed * dt;\n        this.xSpeed *= this.DAMP;\n        \n    }\n\n    onBeginContact(contact, selfCollider, otherCollider) {\n        if (otherCollider.node.name === \"LaserBlue\") {\n            this.game.playRockExplosion();\n            otherCollider.node.destroy();\n            if (this.hitPoints > 0) {\n                this.hitPoints--;\n            }\n            else {\n                // Turn off just the hitbox since we will destroy the whole node after we are done with the animation.\n                this.node.getComponent(cc.RigidBody).enabledContactListener = false;\n                this.getComponent(cc.Animation).play(\"Explosion\");\n            }\n        }\n        if (otherCollider.node.name === \"Player\") {\n            // ====== TODO FIX\n            this.node.getComponent(cc.RigidBody).enabledContactListener = false;\n            this.getComponent(cc.Animation).play(\"Explosion\");\n            // ======\n            this.game.resetGame();\n            this.game.playExplosionAnimation();\n            // selfCollider.node.destroy();\n                // otherCollider.node.destroy();\n            }\n    }\n\n    setLaserScheduler(fireRate: number,initiateLaser: Function) {\n        cc.director.getScheduler().schedule(initiateLaser, this, fireRate, false);\n    }\n\n    // Local x-pos from the center and velocity vector\n    createLaser(xPos : number, velocityVector: cc.Vec2) {\n        const newLaser = cc.instantiate(this.redLaser);\n        // Relative to the current node. So center it.\n        newLaser.setPosition(xPos, -this.node.height / 2);\n        const body = newLaser.getComponent(cc.RigidBody);\n         (180 / Math.PI)\n        body.linearVelocity = velocityVector;\n        this.node.addChild(newLaser);\n        const laserObject = newLaser.getComponent('LaserRed');\n        // Game from the superclass.\n        laserObject.game = this.game;\n    }\n\n    // Just a hack to get the angle, need to read more about\n    // the coordinate system and how angles work in cocos\n    // Works for now.\n    getAngle() {\n        let angle = Math.atan2(this.game.player.y - this.node.y, this.game.player.x - this.node.x) * -180 / Math.PI;\n        return angle - 90;\n    }\n    // ============== Animation trigger functions ==============\n    destroySelf() {\n        this.node.destroy();\n    }\n}\n"]}