{"version":3,"sources":["../../../../assets/Script/assets/Script/LaserRed.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAK1C;IAAsC,4BAAY;IADlD;QAAA,qEAyDC;QAvDW,qBAAe,GAAmB,IAAI,CAAC;QACvC,gBAAU,GAAW,CAAC,CAAC;QACvB,eAAS,GAAY,CAAC,CAAC;QACvB,gBAAU,GAAW,CAAC,CAAC;QACvB,gBAAU,GAAW,CAAC,CAAC;QAGvB,SAAG,GAAa,IAAI,CAAC;QAC7B,UAAI,GAAS,IAAI,CAAC;;IA+CtB,CAAC;IA7CG,yBAAM,GAAN;QACI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;QACzD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IACtC,CAAC;IAED,aAAa;IACb,IAAI;IAEJ,yBAAM,GAAN,UAAQ,EAAE;QACN,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;aACvB;SACJ;IACL,CAAC;IAED,gCAAa,GAAb;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU;YACjE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;IACtE,CAAC;IAED,iCAAc,GAAd,UAAe,OAAO,EAAE,YAAY,EAAE,aAAa;QAC/C,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC9B,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,YAAY,EAAE,EAAE;gBAChE,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACzC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACtB,+BAA+B;gBAC3B,gCAAgC;aAEvC;YAED,gCAAgC;SAEnC;IACL,CAAC;IAED,iCAAc,GAAd;QACI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAvDgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAwD5B;IAAD,eAAC;CAxDD,AAwDC,CAxDqC,EAAE,CAAC,SAAS,GAwDjD;kBAxDoB,QAAQ","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["const {ccclass, property} = cc._decorator;\n\nimport Game from \"./Game\";\n\n@ccclass\nexport default class LaserRed extends cc.Component {\n    private playerFireSound: cc.AudioSource = null;\n    private lowerBound: number = 0;\n    private leftBound : number = 0;\n    private rightBound: number = 0; \n    private upperBound: number = 0;\n\n\n    private cvs : cc.Node = null;\n    game: Game = null;\n\n    onLoad () {\n        this.playerFireSound = this.getComponent(cc.AudioSource);\n        this.cvs = cc.find(\"Canvas\");\n        this.lowerBound = -this.cvs.height;\n        this.leftBound = -this.cvs.width;\n        this.rightBound = this.cvs.width;\n        this.upperBound = this.cvs.height;\n    }\n\n    // start () {\n    // }\n\n    update (dt) {\n        if (cc.isValid(this.node)) {\n            if (this.isOutOfBounds()) {\n                this.node.destroy();\n            }\n        }\n    }\n\n    isOutOfBounds() {\n        return this.node.y < this.lowerBound || this.node.y > this.upperBound ||\n            this.node.x < this.leftBound || this.node.x > this.rightBound;\n    }\n    \n    onBeginContact(contact, selfCollider, otherCollider) {\n        if (otherCollider.node.name === \"Player\") {\n            this.game.playRockExplosion();\n            selfCollider.node.destroy();\n            if (!this.game.player.getComponent(\"PlayerControl\").isInvincible()) {\n                this.game.playPlayerExplosionAnimation();\n                this.game.resetGame();\n                // selfCollider.node.destroy();\n                    // otherCollider.node.destroy();\n                \n            }\n\n            // otherCollider.node.destroy();\n\n        }\n    }\n\n    playLaserSound() {\n        this.playerFireSound.play();\n    }\n}\n"]}